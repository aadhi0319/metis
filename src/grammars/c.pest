/**
 * Aadhithya Kannan
 * 28 December 2021
 *
 * A PEG to parse C code written in PEST PEG syntax. This file was heavily
 * based on the C PEG written for pointlander/peg. A link is provided below to
 * the original PEG file.
 * https://github.com/pointlander/peg/blob/master/grammars/c/c.peg
 */

/**
 * Lexical Elements
 */

LONG_COMMENT    = { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
LINE_COMMENT    = { "//" ~ (!NEWLINE ~ ANY)* }
PRAGMA          = { "#" ~ (!NEWLINE ~ ANY)* }
COMMENT         = { LONG_COMMENT | LINE_COMMENT | PRAGMA }
WHITESPACE      = _{ WHITE_SPACE }

/**
 * External Definitions
 */
 
FILE					= { SOI ~ TRANSLATION_UNIT? ~ EOI }
TRANSLATION_UNIT        = { EXTERNAL_DECLARATION | SEMI }
EXTERNAL_DECLARATION    = { FUNCTION_DEFINITION | DECLARATION }
FUNCTION_DEFINITION     = { DECLARATION_SPECIFIERS ~ DECLARATOR ~ DECLARATION_LIST? ~ COMPOUND_STATEMENT }
DECLARATION_LIST        = { DECLARATION+ }

/**
 * Declarations
 */

DECLARATION                 = { DECLARATION_SPECIFIERS ~ INIT_DECLARATOR_LIST? ~ SEMI }
DECLARATION_SPECIFIERS      = {
    (
        (STORAGE_CLASS_SPECIFIER | TYPE_QUALIFIER | FUNCTION_SPECIFIER)* ~ TYPEDEF_NAME ~ (STORAGE_CLASS_SPECIFIER | TYPE_QUALIFIER | FUNCTION_SPECIFIER)*
    ) | (
        ((STORAGE_CLASS_SPECIFIER | TYPE_SPECIFIER | TYPE_QUALIFIER | FUNCTION_SPECIFIER)+)
    )
}
INIT_DECLARATOR_LIST        = { INIT_DECLARATOR ~ (COMMA ~ INIT_DECLARATOR)* }
INIT_DECLARATOR             = { DECLARATOR ~ (EQU ~ INITIALIZER)? }
STORAGE_CLASS_SPECIFIER     = { TYPEDEF | EXTERN | STATIC | AUTO | REGISTER | (ATTRIBUTE ~ LPAR ~ LPAR ~ (!RPAR ~ ANY)* ~ RPAR ~ RPAR) }
TYPE_SPECIFIER              = { VOID | CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED | BOOL | COMPLEX | STRUCT_OR_UNION_SPECIFIER | ENUM_SPECIFIER }
STRUCT_OR_UNION_SPECIFIER   = { STRUCT_OR_UNION ~ ((IDENTIFIER? ~ LWING ~ STRUCT_DECLARATION* ~ RWING) | IDENTIFIER) }
STRUCT_OR_UNION             = { STRUCT | UNION }
STRUCT_DECLARATION          = { (SPECIFIER_QUALIFIER_LIST ~ STRUCT_DECLARATOR_LIST?)? ~ SEMI }
SPECIFIER_QUALIFIER_LIST    = { (TYPE_QUALIFIER* ~ TYPEDEF_NAME ~ TYPE_QUALIFIER*) | (TYPE_SPECIFIER | TYPE_QUALIFIER)+ }
STRUCT_DECLARATOR_LIST      = { STRUCT_DECLARATOR ~ (COMMA ~ STRUCT_DECLARATOR)* }
STRUCT_DECLARATOR           = { (DECLARATOR? ~ COLON ~ CONSTANT_EXPRESSION) | (DECLARATOR) }
ENUM_SPECIFIER              = { ENUM ~ ((IDENTIFIER? ~ LWING ~ ENUMERATOR_LIST ~ COMMA? ~ RWING) | IDENTIFIER) }
ENUMERATOR_LIST             = { ENUMERATOR ~ (COMMA ~ ENUMERATOR)* }
ENUMERATOR                  = { ENUMERATION_CONSTANT ~ (EQU ~ CONSTANT_EXPRESSION)? }
TYPE_QUALIFIER              = { CONST | RESTRICT | VOLATILE | (DECLSPEC ~ LPAR ~ IDENTIFIER ~ RPAR) }
FUNCTION_SPECIFIER          = { INLINE | STDCALL }
DECLARATOR                  = { POINTER? ~ DIRECT_DECLARATOR }
DIRECT_DECLARATOR           = { 
    (
        (IDENTIFIER) | (LPAR ~ DECLARATOR ~ RPAR)
    ) ~ (
        (LBRK ~ TYPE_QUALIFIER* ~ ASSIGNMENT_EXPRESSION? ~ RBRK)            |
        (LBRK ~ STATIC ~ TYPE_QUALIFIER* ~ ASSIGNMENT_EXPRESSION ~ RBRK)    |
        (LBRK ~ TYPE_QUALIFIER+ ~ STATIC ~ ASSIGNMENT_EXPRESSION ~ RBRK)    |
        (LBRK ~ TYPE_QUALIFIER* ~ STAR ~ RBRK)                              |
        (LPAR ~ PARAMETER_TYPE_LIST ~ RPAR)                                 |
        (LPAR ~ IDENTIFIER_LIST? ~ RPAR)
    )*
}
POINTER                     = { (STAR ~ TYPE_QUALIFIER*)+ }
PARAMETER_TYPE_LIST         = { PARAMETER_LIST ~ (COMMA ~ ELLIPSIS)? }
PARAMETER_LIST              = { PARAMETER_DECLARATION ~ (COMMA ~ PARAMETER_DECLARATION)* }
PARAMETER_DECLARATION       = { DECLARATION_SPECIFIERS ~ (DECLARATOR | ABSTRACT_DECLARATOR)? }
IDENTIFIER_LIST             = { IDENTIFIER ~ (COMMA ~ IDENTIFIER)* }
TYPENAME                    = { SPECIFIER_QUALIFIER_LIST ~ ABSTRACT_DECLARATOR? }
ABSTRACT_DECLARATOR         = { (POINTER? ~ DIRECT_ABSTRACT_DECLARATOR) | (POINTER) }
DIRECT_ABSTRACT_DECLARATOR  = { 
    (
        (LPAR ~ ABSTRACT_DECLARATOR ~ RPAR) |
        (LBRK ~ (ASSIGNMENT_EXPRESSION | STAR)? ~ RBRK) |
        (LPAR ~ PARAMETER_TYPE_LIST? ~ RPAR)
    ) ~ (
        (LBRK ~ (ASSIGNMENT_EXPRESSION | STAR)? ~ RBRK) |
        (LPAR ~ PARAMETER_TYPE_LIST? ~ RPAR)
    )*
}
TYPEDEF_NAME                = { IDENTIFIER }
INITIALIZER                 = { (ASSIGNMENT_EXPRESSION) | (LWING ~ INITIALIZER_LIST ~ COMMA? ~ RWING) }
INITIALIZER_LIST            = { DESIGNATION? ~ INITIALIZER ~ (COMMA ~ DESIGNATION? ~ INITIALIZER)* }
DESIGNATION                 = { DESIGNATOR+ ~ EQU }
DESIGNATOR                  = { (LBRK ~ CONSTANT_EXPRESSION ~ RBRK) | (DOT ~ IDENTIFIER) }

/**
 * Statements
 */

STATEMENT               = { LABELED_STATEMENT | COMPOUND_STATEMENT | EXPRESSION_STATEMENT | SELECTION_STATEMENT | ITERATION_STATEMENT | JUMP_STATEMENT }
LABELED_STATEMENT       = { 
    (
        (IDENTIFIER ~ COLON ~ STATEMENT)                    |
        (CASE ~ CONSTANT_EXPRESSION ~ COLON ~ STATEMENT)    |
        (DEFAULT ~ COLON ~ STATEMENT)
    )
}
COMPOUND_STATEMENT      = { LWING ~ (DECLARATION | STATEMENT)* ~ RWING }
EXPRESSION_STATEMENT    = { EXPRESSION? ~ SEMI }
SELECTION_STATEMENT     = {
    (
        (IF ~ LPAR ~ EXPRESSION ~ RPAR ~ STATEMENT ~ (ELSE ~ STATEMENT)?)   |
        (SWITCH ~ LPAR ~ EXPRESSION ~ RPAR ~ STATEMENT)
    )
}
ITERATION_STATEMENT     = {
    (
        (WHILE ~ LPAR ~ EXPRESSION ~ RPAR ~ STATEMENT)                                          |
        (DO ~ STATEMENT ~ WHILE ~ LPAR ~ EXPRESSION ~ RPAR ~ SEMI)                              |
        (FOR ~ LPAR ~ EXPRESSION? ~ SEMI ~ EXPRESSION? ~ SEMI ~ EXPRESSION? ~ RPAR ~ STATEMENT) |
        (FOR ~ LPAR ~ DECLARATION ~ EXPRESSION? ~ SEMI ~ EXPRESSION? ~ RPAR ~ STATEMENT)
    )
}
JUMP_STATEMENT          = { (GOTO ~ IDENTIFIER ~ SEMI) | (CONTINUE ~ SEMI) | (BREAK ~ SEMI) | (RETURN ~ EXPRESSION? ~ SEMI) }

/**
 * Expressions
 */

PRIMARY_EXPRESSION          = { STRING_LITERAL | CONSTANT | IDENTIFIER | (LPAR ~ EXPRESSION ~ RPAR) }
POSTFIX_EXPRESSION          = { 
    (
        (PRIMARY_EXPRESSION) | 
        (LPAR ~ TYPENAME ~ RPAR ~ LWING ~ INITIALIZER_LIST ~ COMMA? ~ RWING)
    ) ~ (
        (LBRK ~ EXPRESSION ~ RBRK)                      |
        (LPAR ~ ARGUMENT_EXPRESSION_LIST? ~ RPAR)   |
        (DOT ~ IDENTIFIER)                          |
        (PTR ~ IDENTIFIER)                          |
        (INC)                                       |
        (DEC)
    )*
}
ARGUMENT_EXPRESSION_LIST  = { ASSIGNMENT_EXPRESSION ~ (COMMA ~ ASSIGNMENT_EXPRESSION)* }
UNARY_EXPRESSION            = { (POSTFIX_EXPRESSION) | (INC ~ UNARY_EXPRESSION) | (DEC ~ UNARY_EXPRESSION) | (UNARY_OPERATOR ~ CAST_EXPRESSION) | (SIZEOF ~ (UNARY_EXPRESSION | (LPAR ~ TYPENAME ~ RPAR))) }
UNARY_OPERATOR              = { AND | STAR | PLUS | MINUS | TILDA | BANG }
CAST_EXPRESSION             = { (LPAR ~ TYPENAME ~ RPAR ~ CAST_EXPRESSION) | (UNARY_EXPRESSION) }
MULTIPLICATIVE_EXPRESSION   = { CAST_EXPRESSION ~ ((STAR | DIV | MOD) ~ CAST_EXPRESSION)* }
ADDITIVE_EXPRESSION         = { MULTIPLICATIVE_EXPRESSION ~ ((PLUS | MINUS) ~ MULTIPLICATIVE_EXPRESSION)* }
SHIFT_EXPRESSION            = { ADDITIVE_EXPRESSION ~ ((LEFT | RIGHT) ~ ADDITIVE_EXPRESSION)* }
RELATIONAL_EXPRESSION       = { SHIFT_EXPRESSION ~ ((LE | GE | LT | GT) ~ SHIFT_EXPRESSION)* }
EQUALITY_EXPRESSION         = { RELATIONAL_EXPRESSION ~ ((EQUEQU | BANGEQU) ~ RELATIONAL_EXPRESSION)* }
AND_EXPRESSION              = { EQUALITY_EXPRESSION ~ (AND ~ EQUALITY_EXPRESSION)* }
EXCLUSIVE_OR_EXPRESSION     = { AND_EXPRESSION ~ (HAT ~ AND_EXPRESSION)* }
INCLUSIVE_OR_EXPRESSION     = { EXCLUSIVE_OR_EXPRESSION ~ (OR ~ EXCLUSIVE_OR_EXPRESSION)* }
LOGICAL_AND_EXPRESSION      = { INCLUSIVE_OR_EXPRESSION ~ (ANDAND ~ INCLUSIVE_OR_EXPRESSION)* }
LOGICAL_OR_EXPRESSION       = { LOGICAL_AND_EXPRESSION ~ (OROR ~ LOGICAL_AND_EXPRESSION)* }
CONDITIONAL_EXPRESSION      = { LOGICAL_OR_EXPRESSION ~ (QUERY ~ EXPRESSION ~ COLON ~ LOGICAL_OR_EXPRESSION)* }
ASSIGNMENT_EXPRESSION       = { (UNARY_EXPRESSION ~ ASSIGNMENT_OPERATOR ~ ASSIGNMENT_EXPRESSION) | (CONDITIONAL_EXPRESSION) }
ASSIGNMENT_OPERATOR         = { EQU | STAREQU | DIVEQU | MODEQU | PLUSEQU | MINUSEQU | LEFTEQU | RIGHTEQU | ANDEQU | HATEQU | OREQU }
EXPRESSION                  = { ASSIGNMENT_EXPRESSION ~ (COMMA ~ ASSIGNMENT_EXPRESSION)* }
CONSTANT_EXPRESSION         = { CONDITIONAL_EXPRESSION }

/**
 * Identifiers
 */

IDENTIFIER  = @{ !KEYWORD ~ ID_NONDIGIT ~ ID_CHAR* }
ID_NONDIGIT = { !ASCII_DIGIT ~ ID_CHAR }
ID_CHAR     = { ASCII_ALPHANUMERIC | "_" | UNICODE_ESCAPE }

/**
 * Keywords
 */

ATTRIBUTE   = @{ "__attribute__" ~ !ID_CHAR }
AUTO        = @{ "auto" ~ !ID_CHAR }
BOOL        = @{ "_Bool" ~ !ID_CHAR }
BREAK       = @{ "break" ~ !ID_CHAR }
CASE        = @{ "case" ~ !ID_CHAR }
CHAR        = @{ "char" ~ !ID_CHAR }
COMPLEX     = @{ "_Complex" ~ !ID_CHAR }
CONST       = @{ "const" ~ !ID_CHAR }
CONTINUE    = @{ "continue" ~ !ID_CHAR }
DECLSPEC    = @{ "__declspec" ~ !ID_CHAR }
DEFAULT     = @{ "default" ~ !ID_CHAR }
DO          = @{ "do" ~ !ID_CHAR }
DOUBLE      = @{ "double" ~ !ID_CHAR }
ELSE        = @{ "else" ~ !ID_CHAR }
ENUM        = @{ "enum" ~ !ID_CHAR }
EXTERN      = @{ "extern" ~ !ID_CHAR }
FLOAT       = @{ "float" ~ !ID_CHAR }
FOR         = @{ "for" ~ !ID_CHAR }
GOTO        = @{ "goto" ~ !ID_CHAR }
IF          = @{ "if" ~ !ID_CHAR }
INLINE      = @{ "inline" ~ !ID_CHAR }
INT         = @{ "int" ~ !ID_CHAR }
LONG        = @{ "long" ~ !ID_CHAR }
REGISTER    = @{ "register" ~ !ID_CHAR }
RESTRICT    = @{ "restrict" ~ !ID_CHAR }
RETURN      = @{ "return" ~ !ID_CHAR }
SHORT       = @{ "short" ~ !ID_CHAR }
SIGNED      = @{ "signed" ~ !ID_CHAR }
SIZEOF      = @{ "sizeof" ~ !ID_CHAR }
STATIC      = @{ "static" ~ !ID_CHAR }
STDCALL     = @{ "_stdcall" ~ !ID_CHAR }
STRUCT      = @{ "struct" ~ !ID_CHAR }
SWITCH      = @{ "switch" ~ !ID_CHAR }
TYPEDEF     = @{ "typedef" ~ !ID_CHAR }
UNION       = @{ "union" ~ !ID_CHAR }
UNSIGNED    = @{ "unsigned" ~ !ID_CHAR }
VOID        = @{ "void" ~ !ID_CHAR }
VOLATILE    = @{ "volatile" ~ !ID_CHAR }
WHILE       = @{ "while" ~ !ID_CHAR }

KEYWORD = { (
    ATTRIBUTE   |
    AUTO        |
    BOOL        |
    BREAK       |
    CASE        |
    CHAR        |
    COMPLEX     |
    CONST       |
    CONTINUE    |
    DECLSPEC    |
    DEFAULT     |
    DO          |
    DOUBLE      |
    ELSE        |
    ENUM        |
    EXTERN      |
    FLOAT       |
    FOR         |
    GOTO        |
    IF          |
    INLINE      |
    INT         |
    LONG        |
    REGISTER    |
    RESTRICT    |
    RETURN      |
    SHORT       |
    SIGNED      |
    SIZEOF      |
    STATIC      |
    STDCALL     |
    STRUCT      |
    SWITCH      |
    TYPEDEF     |
    UNION       |
    UNSIGNED    |
    VOID        |
    VOLATILE    |
    WHILE
)}

/**
 * Constants
 */

CONSTANT                = { FLOAT_CONSTANT | INTEGER_CONSTANT | ENUMERATION_CONSTANT | CHARACTER_LITERAL }
INTEGER_CONSTANT        = ${ !FLOAT_CONSTANT ~ (DECIMAL_CONSTANT | HEX_CONSTANT | OCTAL_CONSTANT) ~ INTEGER_SUFFIX? }
DECIMAL_CONSTANT        = ${ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
OCTAL_CONSTANT          = ${ "0" ~ ASCII_OCT_DIGIT* }
HEX_CONSTANT            = ${ HEX_PREFIX ~ ASCII_HEX_DIGIT+ }
HEX_PREFIX              = { ^"0x" }
INTEGER_SUFFIX          = ${ ((^"u") ~ LSUFFIX) | (LSUFFIX ~ (^"u")) }
LSUFFIX                 = { "l" | "L" | "ll" | "LL" }
FLOAT_CONSTANT          = ${ (DECIMAL_FLOAT_CONSTANT | HEX_FLOAT_CONSTANT) ~ FLOAT_SUFFIX }
DECIMAL_FLOAT_CONSTANT  = ${ (FRACTION ~ EXPONENT?) | (ASCII_DIGIT+ ~ EXPONENT) }
HEX_FLOAT_CONSTANT      = ${ (HEX_PREFIX ~ HEX_FRACTION ~ BINARY_EXPONENT?) | (HEX_PREFIX ~ ASCII_HEX_DIGIT ~ BINARY_EXPONENT) }
FRACTION                = ${ (ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+) | (ASCII_DIGIT+ ~ ".") }
HEX_FRACTION            = ${ (ASCII_HEX_DIGIT* ~ "." ~ ASCII_HEX_DIGIT+) | (ASCII_HEX_DIGIT+ ~ ".") }
EXPONENT                = ${ (^"e") ~ ("+" | "-")? ~ ASCII_DIGIT+ }
BINARY_EXPONENT         = ${ (^"p") ~ ("+" | "-")? ~ ASCII_DIGIT+ }
FLOAT_SUFFIX            = { ^"f" | ^"l" }
ENUMERATION_CONSTANT    = { IDENTIFIER }
CHARACTER_LITERAL       = { "L"? ~ "\'" ~ CHARACTER* ~ "\'" }
CHARACTER               = { ESCAPE | (!("\'" | "\n" | "\\") ~ ANY) }

/**
 * Escape Characters
 */

ESCAPE          = { SIMPLE_ESCAPE | OCTAL_ESCAPE | HEX_ESCAPE | UNICODE_ESCAPE }
SIMPLE_ESCAPE   = @{ "\\" ~ ("\'" | "\"" | "?" | "\\" | "%" | "a" | "b" | "f" | "n" | "r" | "t" | "v")}
UNICODE_ESCAPE  = @{ ("\\u" ~ ASCII_HEX_DIGIT{4} | "\\U" ~ ASCII_HEX_DIGIT{8}) }
OCTAL_ESCAPE    = @{ "\\" ~ ASCII_OCT_DIGIT{1, 3} }
HEX_ESCAPE      = @{ "\\x" ~ ASCII_HEX_DIGIT+ }

/**
 * String Literals
 */

STRING_LITERAL  = @{ "L"? ~ "\"" ~ (!("\"" | "\n" | "\\") ~ ANY)*  ~ "\"" }

/**
 * Punctuators
 */

ANDAND     = { "&&" }
ANDEQU     = { "&=" }
AND        = { !(ANDAND | ANDEQU) ~ "&" }
BANGEQU    = { "!=" }
BANG       = { !BANGEQU ~ "!" }
COLON      = { ":" }
COMMA      = { "," }
DIVEQU     = { "/=" }
DIV        = { !DIVEQU ~ "/" }
ELLIPSIS   = { "..." }
DOT        = { !ELLIPSIS ~ "." }
EQUEQU     = { "==" }
EQU        = { !EQUEQU ~ "=" }
RIGHTEQU   = { ">>=" }
RIGHT      = { !RIGHTEQU ~ ">>" }
GE         = { !RIGHTEQU ~ ">=" }
GT         = { !(RIGHT | GE) ~ ">" }
HATEQU     = { "^=" }
HAT        = { !HATEQU ~ "^" }
LBRK       = { "[" }
LPAR       = { "(" }
LEFTEQU    = { "<<=" }
LEFT       = { !LEFTEQU ~ "<<" }
LE         = { !LEFTEQU ~ "<=" }
LT         = { !(LEFT | LE) ~ "<" }
LWING      = { "{" }
DEC        = { "--" }
MINUSEQU   = { "-=" }
PTR        = { "->" }
MINUS      = { !(DEC | MINUSEQU | PTR) ~ "-" }
MODEQU     = { "%=" }
MOD        = { !MODEQU ~ "%" }
OROR       = { "||" }
OREQU      = { "|=" }
OR         = { !(OROR | OREQU) ~ "|" }
INC        = { "++" }
PLUSEQU    = { "+=" }
PLUS       = { !(INC | PLUSEQU) ~ "+" }
QUERY      = { "?" }
RBRK       = { "]" }
RPAR       = { ")" }
RWING      = { "}" }
SEMI       = { ";" }
STAREQU    = { "*=" }
STAR       = { !STAREQU ~ "*" }
TILDA      = { "~" }